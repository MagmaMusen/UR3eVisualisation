========== PROJECT USER FILES SUMMARY ==========
Export Timestamp: 4/24/2025 1:17:00 PM
Unity Version: 2022.3.47f1
Project Path: /Users/magnuskyneb/AU/DT/UR3eVisualisation
Included Content Extensions: .cs, .shader, .json, .xml, .txt, .csv, .asmdef, .inputactions
==============================================

========== INSTALLED PACKAGES (manifest.json) ==========
--- Content of Packages/manifest.json ---
{
  "dependencies": {
    "com.github-glitchenzo.nugetforunity": "https://github.com/GlitchEnzo/NuGetForUnity.git?path=/src/NuGetForUnity",
    "com.unity.collab-proxy": "2.7.1",
    "com.unity.feature.development": "1.0.1",
    "com.unity.robotics.urdf-importer": "https://github.com/Unity-Technologies/URDF-Importer.git?path=/com.unity.robotics.urdf-importer#v0.5.2",
    "com.unity.textmeshpro": "3.0.7",
    "com.unity.timeline": "1.7.6",
    "com.unity.ugui": "1.0.0",
    "com.unity.visualscripting": "1.9.4",
    "com.unity.modules.ai": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.modules.animation": "1.0.0",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.cloth": "1.0.0",
    "com.unity.modules.director": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.imgui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.modules.physics": "1.0.0",
    "com.unity.modules.physics2d": "1.0.0",
    "com.unity.modules.screencapture": "1.0.0",
    "com.unity.modules.terrain": "1.0.0",
    "com.unity.modules.terrainphysics": "1.0.0",
    "com.unity.modules.tilemap": "1.0.0",
    "com.unity.modules.ui": "1.0.0",
    "com.unity.modules.uielements": "1.0.0",
    "com.unity.modules.umbra": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.modules.unitywebrequestaudio": "1.0.0",
    "com.unity.modules.unitywebrequesttexture": "1.0.0",
    "com.unity.modules.unitywebrequestwww": "1.0.0",
    "com.unity.modules.vehicles": "1.0.0",
    "com.unity.modules.video": "1.0.0",
    "com.unity.modules.vr": "1.0.0",
    "com.unity.modules.wind": "1.0.0",
    "com.unity.modules.xr": "1.0.0"
  }
}

--- End of Content ---
========================================================

========== KEY PROJECT SETTINGS ==========
--- Content of ProjectSettings/ProjectVersion.txt ---
m_EditorVersion: 2022.3.47f1
m_EditorVersionWithRevision: 2022.3.47f1 (88c277b85d21)

--- End of Content ---

--- Content of ProjectSettings/ProjectSettings.asset ---
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!129 &1
PlayerSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 26
  productGUID: c662b16ef2484164aaf32a7fb83a9434
  AndroidProfiler: 0
  AndroidFilterTouchesWhenObscured: 0
  AndroidEnableSustainedPerformanceMode: 0
  defaultScreenOrientation: 4
  targetDevice: 2
  useOnDemandResources: 0
  accelerometerFrequency: 60
  companyName: Towards Digital Twin Aided Autonomy for a Robotic Manipulator
  productName: UR3e Visualisation
  defaultCursor: {fileID: 0}
  cursorHotspot: {x: 0, y: 0}
  m_SplashScreenBackgroundColor: {r: 0.13725491, g: 0.12156863, b: 0.1254902, a: 1}
  m_ShowUnitySplashScreen: 1
  m_ShowUnitySplashLogo: 1
  m_SplashScreenOverlayOpacity: 1
  m_SplashScreenAnimation: 1
  m_SplashScreenLogoStyle: 1
  m_SplashScreenDrawMode: 0
  m_SplashScreenBackgroundAnimationZoom: 1
  m_SplashScreenLogoAnimationZoom: 1
  m_SplashScreenBackgroundLandscapeAspect: 1
  m_SplashScreenBackgroundPortraitAspect: 1
  m_SplashScreenBackgroundLandscapeUvs:
    serializedVersion: 2
    x: 0
    y: 0
    width: 1
    height: 1
  m_SplashScreenBackgroundPortraitUvs:
    serializedVersion: 2
    x: 0
    y: 0
    width: 1
    height: 1
  m_SplashScreenLogos: []
  m_VirtualRealitySplashScreen: {fileID: 0}
  m_HolographicTrackingLossScreen: {fileID: 0}
  defaultScreenWidth: 1920
  defaultScreenHeight: 1080
  defaultScreenWidthWeb: 960
  defaultScreenHeightWeb: 600
  m_StereoRenderingPath: 0
  m_ActiveColorSpace: 1
  unsupportedMSAAFallback: 0
  m_SpriteBatchVertexThreshold: 300
  m_MTRendering: 1
  mipStripping: 0
  numberOfMipsStripped: 0
  numberOfMipsStrippedPerMipmapLimitGroup: {}
  m_StackTraceTypes: 010000000100000001000000010000000100000001000000
  iosShowActivityIndicatorOnLoading: -1
  androidShowActivityIndicatorOnLoading: -1
  iosUseCustomAppBackgroundBehavior: 0
  allowedAutorotateToPortrait: 1
  allowedAutorotateToPortraitUpsideDown: 1
  allowedAutorotateToLandscapeRight: 1
  allowedAutorotateToLandscapeLeft: 1
  useOSAutorotation: 1
  use32BitDisplayBuffer: 1
  preserveFramebufferAlpha: 0
  disableDepthAndStencilBuffers: 0
  androidStartInFullscreen: 1
  androidRenderOutsideSafeArea: 1
  androidUseSwappy: 1
  androidBlitType: 0
  androidResizableWindow: 0
  androidDefaultWindowWidth: 1920
  androidDefaultWindowHeight: 1080
  androidMinimumWindowWidth: 400
  androidMinimumWindowHeight: 300
  androidFullscreenMode: 1
  androidAutoRotationBehavior: 1
  defaultIsNativeResolution: 0
  macRetinaSupport: 1
  runInBackground: 1
  captureSingleScreen: 0
  muteOtherAudioSources: 0
  Prepare IOS For Recording: 0
  Force IOS Speakers When Recording: 0
  deferSystemGesturesMode: 0
  hideHomeButton: 0
  submitAnalytics: 1
  usePlayerLog: 1
  dedicatedServerOptimizations: 0
  bakeCollisionMeshes: 0
  forceSingleInstance: 0
  useFlipModelSwapchain: 1
  resizableWindow: 0
  useMacAppStoreValidation: 0
  macAppStoreCategory: public.app-category.games
  gpuSkinning: 1
  xboxPIXTextureCapture: 0
  xboxEnableAvatar: 0
  xboxEnableKinect: 0
  xboxEnableKinectAutoTracking: 0
  xboxEnableFitness: 0
  visibleInBackground: 1
  allowFullscreenSwitch: 1
  fullscreenMode: 3
  xboxSpeechDB: 0
  xboxEnableHeadOrientation: 0
  xboxEnableGuest: 0
  xboxEnablePIXSampling: 0
  metalFramebufferOnly: 0
  xboxOneResolution: 0
  xboxOneSResolution: 0
  xboxOneXResolution: 3
  xboxOneMonoLoggingLevel: 0
  xboxOneLoggingLevel: 1
  xboxOneDisableEsram: 0
  xboxOneEnableTypeOptimization: 0
  xboxOnePresentImmediateThreshold: 0
  switchQueueCommandMemory: 0
  switchQueueControlMemory: 16384
  switchQueueComputeMemory: 262144
  switchNVNShaderPoolsGranularity: 33554432
  switchNVNDefaultPoolsGranularity: 16777216
  switchNVNOtherPoolsGranularity: 16777216
  switchGpuScratchPoolGranularity: 2097152
  switchAllowGpuScratchShrinking: 0
  switchNVNMaxPublicTextureIDCount: 0
  switchNVNMaxPublicSamplerIDCount: 0
  switchNVNGraphicsFirmwareMemory: 32
  switchMaxWorkerMultiple: 8
  stadiaPresentMode: 0
  stadiaTargetFramerate: 0
  vulkanNumSwapchainBuffers: 3
  vulkanEnableSetSRGBWrite: 0
  vulkanEnablePreTransform: 1
  vulkanEnableLateAcquireNextImage: 0
  vulkanEnableCommandBufferRecycling: 1
  loadStoreDebugModeEnabled: 0
  visionOSBundleVersion: 1.0
  tvOSBundleVersion: 1.0
  bundleVersion: 0.1
  preloadedAssets: []
  metroInputSource: 0
  wsaTransparentSwapchain: 0
  m_HolographicPauseOnTrackingLoss: 1
  xboxOneDisableKinectGpuReservation: 1
  xboxOneEnable7thCore: 1
  vrSettings:
    enable360StereoCapture: 0
  isWsaHolographicRemotingEnabled: 0
  enableFrameTimingStats: 0
  enableOpenGLProfilerGPURecorders: 1
  allowHDRDisplaySupport: 0
  useHDRDisplay: 0
  hdrBitDepth: 0
  m_ColorGamuts: 00000000
  targetPixelDensity: 30
  resolutionScalingMode: 0
  resetResolutionOnWindowResize: 0
  androidSupportedAspectRatio: 1
  androidMaxAspectRatio: 2.1
  applicationIdentifier:
    Standalone: com.DefaultCompany.UR3eVizUnity
  buildNumber:
    Standalone: 0
    VisionOS: 0
    iPhone: 0
    tvOS: 0
  overrideDefaultApplicationIdentifier: 0
  AndroidBundleVersionCode: 1
  AndroidMinSdkVersion: 22
  AndroidTargetSdkVersion: 0
  AndroidPreferredInstallLocation: 1
  aotOptions: 
  stripEngineCode: 1
  iPhoneStrippingLevel: 0
  iPhoneScriptCallOptimization: 0
  ForceInternetPermission: 0
  ForceSDCardPermission: 0
  CreateWallpaper: 0
  APKExpansionFiles: 0
  keepLoadedShadersAlive: 0
  StripUnusedMeshComponents: 1
  strictShaderVariantMatching: 0
  VertexChannelCompressionMask: 4054
  iPhoneSdkVersion: 988
  iOSTargetOSVersionString: 12.0
  tvOSSdkVersion: 0
  tvOSRequireExtendedGameController: 0
  tvOSTargetOSVersionString: 12.0
  VisionOSSdkVersion: 0
  VisionOSTargetOSVersionString: 1.0
  uIPrerenderedIcon: 0
  uIRequiresPersistentWiFi: 0
  uIRequiresFullScreen: 1
  uIStatusBarHidden: 1
  uIExitOnSuspend: 0
  uIStatusBarStyle: 0
  appleTVSplashScreen: {fileID: 0}
  appleTVSplashScreen2x: {fileID: 0}
  tvOSSmallIconLayers: []
  tvOSSmallIconLayers2x: []
  tvOSLargeIconLayers: []
  tvOSLargeIconLayers2x: []
  tvOSTopShelfImageLayers: []
  tvOSTopShelfImageLayers2x: []
  tvOSTopShelfImageWideLayers: []
  tvOSTopShelfImageWideLayers2x: []
  iOSLaunchScreenType: 0
  iOSLaunchScreenPortrait: {fileID: 0}
  iOSLaunchScreenLandscape: {fileID: 0}
  iOSLaunchScreenBackgroundColor:
    serializedVersion: 2
    rgba: 0
  iOSLaunchScreenFillPct: 100
  iOSLaunchScreenSize: 100
  iOSLaunchScreenCustomXibPath: 
  iOSLaunchScreeniPadType: 0
  iOSLaunchScreeniPadImage: {fileID: 0}
  iOSLaunchScreeniPadBackgroundColor:
    serializedVersion: 2
    rgba: 0
  iOSLaunchScreeniPadFillPct: 100
  iOSLaunchScreeniPadSize: 100
  iOSLaunchScreeniPadCustomXibPath: 
  iOSLaunchScreenCustomStoryboardPath: 
  iOSLaunchScreeniPadCustomStoryboardPath: 
  iOSDeviceRequirements: []
  iOSURLSchemes: []
  macOSURLSchemes: []
  iOSBackgroundModes: 0
  iOSMetalForceHardShadows: 0
  metalEditorSupport: 1
  metalAPIValidation: 1
  metalCompileShaderBinary: 0
  iOSRenderExtraFrameOnPause: 0
  iosCopyPluginsCodeInsteadOfSymlink: 0
  appleDeveloperTeamID: 
  iOSManualSigningProvisioningProfileID: 
  tvOSManualSigningProvisioningProfileID: 
  VisionOSManualSigningProvisioningProfileID: 
  iOSManualSigningProvisioningProfileType: 0
  tvOSManualSigningProvisioningProfileType: 0
  VisionOSManualSigningProvisioningProfileType: 0
  appleEnableAutomaticSigning: 0
  iOSRequireARKit: 0
  iOSAutomaticallyDetectAndAddCapabilities: 1
  appleEnableProMotion: 0
  shaderPrecisionModel: 0
  clonedFromGUID: c0afd0d1d80e3634a9dac47e8a0426ea
  templatePackageId: com.unity.template.3d@8.1.3
  templateDefaultScene: Assets/Scenes/SampleScene.unity
  useCustomMainManifest: 0
  useCustomLauncherManifest: 0
  useCustomMainGradleTemplate: 0
  useCustomLauncherGradleManifest: 0
  useCustomBaseGradleTemplate: 0
  useCustomGradlePropertiesTemplate: 0
  useCustomGradleSettingsTemplate: 0
  useCustomProguardFile: 0
  AndroidTargetArchitectures: 1
  AndroidTargetDevices: 0
  AndroidSplashScreenScale: 0
  androidSplashScreen: {fileID: 0}
  AndroidKeystoreName: 
  AndroidKeyaliasName: 
  AndroidEnableArmv9SecurityFeatures: 0
  AndroidBuildApkPerCpuArchitecture: 0
  AndroidTVCompatibility: 0
  AndroidIsGame: 1
  AndroidEnableTango: 0
  androidEnableBanner: 1
  androidUseLowAccuracyLocation: 0
  androidUseCustomKeystore: 0
  m_AndroidBanners:
  - width: 320
    height: 180
    banner: {fileID: 0}
  androidGamepadSupportLevel: 0
  chromeosInputEmulation: 1
  AndroidMinifyRelease: 0
  AndroidMinifyDebug: 0
  AndroidValidateAppBundleSize: 1
  AndroidAppBundleSizeToValidate: 150
  m_BuildTargetIcons: []
  m_BuildTargetPlatformIcons: []
  m_BuildTargetBatching:
  - m_BuildTarget: Standalone
    m_StaticBatching: 1
    m_DynamicBatching: 0
  - m_BuildTarget: tvOS
    m_StaticBatching: 1
    m_DynamicBatching: 0
  - m_BuildTarget: Android
    m_StaticBatching: 1
    m_DynamicBatching: 0
  - m_BuildTarget: iPhone
    m_StaticBatching: 1
    m_DynamicBatching: 0
  - m_BuildTarget: WebGL
    m_StaticBatching: 0
    m_DynamicBatching: 0
  m_BuildTargetShaderSettings: []
  m_BuildTargetGraphicsJobs:
  - m_BuildTarget: MacStandaloneSupport
    m_GraphicsJobs: 0
  - m_BuildTarget: Switch
    m_GraphicsJobs: 1
  - m_BuildTarget: MetroSupport
    m_GraphicsJobs: 1
  - m_BuildTarget: AppleTVSupport
    m_GraphicsJobs: 0
  - m_BuildTarget: BJMSupport
    m_GraphicsJobs: 1
  - m_BuildTarget: LinuxStandaloneSupport
    m_GraphicsJobs: 1
  - m_BuildTarget: PS4Player
    m_GraphicsJobs: 1
  - m_BuildTarget: iOSSupport
    m_GraphicsJobs: 0
  - m_BuildTarget: WindowsStandaloneSupport
    m_GraphicsJobs: 1
  - m_BuildTarget: XboxOnePlayer
    m_GraphicsJobs: 1
  - m_BuildTarget: LuminSupport
    m_GraphicsJobs: 0
  - m_BuildTarget: AndroidPlayer
    m_GraphicsJobs: 0
  - m_BuildTarget: WebGLSupport
    m_GraphicsJobs: 0
  m_BuildTargetGraphicsJobMode:
  - m_BuildTarget: PS4Player
    m_GraphicsJobMode: 0
  - m_BuildTarget: XboxOnePlayer
    m_GraphicsJobMode: 0
  m_BuildTargetGraphicsAPIs:
  - m_BuildTarget: AndroidPlayer
    m_APIs: 150000000b000000
    m_Automatic: 1
  - m_BuildTarget: iOSSupport
    m_APIs: 10000000
    m_Automatic: 1
  - m_BuildTarget: AppleTVSupport
    m_APIs: 10000000
    m_Automatic: 1
  - m_BuildTarget: WebGLSupport
    m_APIs: 0b000000
    m_Automatic: 1
  m_BuildTargetVRSettings:
  - m_BuildTarget: Standalone
    m_Enabled: 0
    m_Devices:
    - Oculus
    - OpenVR
  m_DefaultShaderChunkSizeInMB: 16
  m_DefaultShaderChunkCount: 0
  openGLRequireES31: 0
  openGLRequireES31AEP: 0
  openGLRequireES32: 0
  m_TemplateCustomTags: {}
  mobileMTRendering:
    Android: 1
    iPhone: 1
    tvOS: 1
  m_BuildTargetGroupLightmapEncodingQuality:
  - m_BuildTarget: Android
    m_EncodingQuality: 1
  - m_BuildTarget: iPhone
    m_EncodingQuality: 1
  - m_BuildTarget: tvOS
    m_EncodingQuality: 1
  m_BuildTargetGroupHDRCubemapEncodingQuality:
  - m_BuildTarget: Android
    m_EncodingQuality: 1
  - m_BuildTarget: iPhone
    m_EncodingQuality: 1
  - m_BuildTarget: tvOS
    m_EncodingQuality: 1
  m_BuildTargetGroupLightmapSettings: []
  m_BuildTargetGroupLoadStoreDebugModeSettings: []
  m_BuildTargetNormalMapEncoding:
  - m_BuildTarget: Android
    m_Encoding: 1
  - m_BuildTarget: iPhone
    m_Encoding: 1
  - m_BuildTarget: tvOS
    m_Encoding: 1
  m_BuildTargetDefaultTextureCompressionFormat:
  - m_BuildTarget: Android
    m_Format: 3
  playModeTestRunnerEnabled: 0
  runPlayModeTestAsEditModeTest: 0
  actionOnDotNetUnhandledException: 1
  enableInternalProfiler: 0
  logObjCUncaughtExceptions: 1
  enableCrashReportAPI: 0
  cameraUsageDescription: 
  locationUsageDescription: 
  microphoneUsageDescription: 
  bluetoothUsageDescription: 
  macOSTargetOSVersion: 10.13.0
  switchNMETAOverride: 
  switchNetLibKey: 
  switchSocketMemoryPoolSize: 6144
  switchSocketAllocatorPoolSize: 128
  switchSocketConcurrencyLimit: 14
  switchScreenResolutionBehavior: 2
  switchUseCPUProfiler: 0
  switchEnableFileSystemTrace: 0
  switchLTOSetting: 0
  switchApplicationID: 0x01004b9000490000
  switchNSODependencies: 
  switchCompilerFlags: 
  switchTitleNames_0: 
  switchTitleNames_1: 
  switchTitleNames_2: 
  switchTitleNames_3: 
  switchTitleNames_4: 
  switchTitleNames_5: 
  switchTitleNames_6: 
  switchTitleNames_7: 
  switchTitleNames_8: 
  switchTitleNames_9: 
  switchTitleNames_10: 
  switchTitleNames_11: 
  switchTitleNames_12: 
  switchTitleNames_13: 
  switchTitleNames_14: 
  switchTitleNames_15: 
  switchPublisherNames_0: 
  switchPublisherNames_1: 
  switchPublisherNames_2: 
  switchPublisherNames_3: 
  switchPublisherNames_4: 
  switchPublisherNames_5: 
  switchPublisherNames_6: 
  switchPublisherNames_7: 
  switchPublisherNames_8: 
  switchPublisherNames_9: 
  switchPublisherNames_10: 
  switchPublisherNames_11: 
  switchPublisherNames_12: 
  switchPublisherNames_13: 
  switchPublisherNames_14: 
  switchPublisherNames_15: 
  switchIcons_0: {fileID: 0}
  switchIcons_1: {fileID: 0}
  switchIcons_2: {fileID: 0}
  switchIcons_3: {fileID: 0}
  switchIcons_4: {fileID: 0}
  switchIcons_5: {fileID: 0}
  switchIcons_6: {fileID: 0}
  switchIcons_7: {fileID: 0}
  switchIcons_8: {fileID: 0}
  switchIcons_9: {fileID: 0}
  switchIcons_10: {fileID: 0}
  switchIcons_11: {fileID: 0}
  switchIcons_12: {fileID: 0}
  switchIcons_13: {fileID: 0}
  switchIcons_14: {fileID: 0}
  switchIcons_15: {fileID: 0}
  switchSmallIcons_0: {fileID: 0}
  switchSmallIcons_1: {fileID: 0}
  switchSmallIcons_2: {fileID: 0}
  switchSmallIcons_3: {fileID: 0}
  switchSmallIcons_4: {fileID: 0}
  switchSmallIcons_5: {fileID: 0}
  switchSmallIcons_6: {fileID: 0}
  switchSmallIcons_7: {fileID: 0}
  switchSmallIcons_8: {fileID: 0}
  switchSmallIcons_9: {fileID: 0}
  switchSmallIcons_10: {fileID: 0}
  switchSmallIcons_11: {fileID: 0}
  switchSmallIcons_12: {fileID: 0}
  switchSmallIcons_13: {fileID: 0}
  switchSmallIcons_14: {fileID: 0}
  switchSmallIcons_15: {fileID: 0}
  switchManualHTML: 
  switchAccessibleURLs: 
  switchLegalInformation: 
  switchMainThreadStackSize: 1048576
  switchPresenceGroupId: 
  switchLogoHandling: 0
  switchReleaseVersion: 0
  switchDisplayVersion: 1.0.0
  switchStartupUserAccount: 0
  switchSupportedLanguagesMask: 0
  switchLogoType: 0
  switchApplicationErrorCodeCategory: 
  switchUserAccountSaveDataSize: 0
  switchUserAccountSaveDataJournalSize: 0
  switchApplicationAttribute: 0
  switchCardSpecSize: -1
  switchCardSpecClock: -1
  switchRatingsMask: 0
  switchRatingsInt_0: 0
  switchRatingsInt_1: 0
  switchRatingsInt_2: 0
  switchRatingsInt_3: 0
  switchRatingsInt_4: 0
  switchRatingsInt_5: 0
  switchRatingsInt_6: 0
  switchRatingsInt_7: 0
  switchRatingsInt_8: 0
  switchRatingsInt_9: 0
  switchRatingsInt_10: 0
  switchRatingsInt_11: 0
  switchRatingsInt_12: 0
  switchLocalCommunicationIds_0: 
  switchLocalCommunicationIds_1: 
  switchLocalCommunicationIds_2: 
  switchLocalCommunicationIds_3: 
  switchLocalCommunicationIds_4: 
  switchLocalCommunicationIds_5: 
  switchLocalCommunicationIds_6: 
  switchLocalCommunicationIds_7: 
  switchParentalControl: 0
  switchAllowsScreenshot: 1
  switchAllowsVideoCapturing: 1
  switchAllowsRuntimeAddOnContentInstall: 0
  switchDataLossConfirmation: 0
  switchUserAccountLockEnabled: 0
  switchSystemResourceMemory: 16777216
  switchSupportedNpadStyles: 22
  switchNativeFsCacheSize: 32
  switchIsHoldTypeHorizontal: 0
  switchSupportedNpadCount: 8
  switchEnableTouchScreen: 1
  switchSocketConfigEnabled: 0
  switchTcpInitialSendBufferSize: 32
  switchTcpInitialReceiveBufferSize: 64
  switchTcpAutoSendBufferSizeMax: 256
  switchTcpAutoReceiveBufferSizeMax: 256
  switchUdpSendBufferSize: 9
  switchUdpReceiveBufferSize: 42
  switchSocketBufferEfficiency: 4
  switchSocketInitializeEnabled: 1
  switchNetworkInterfaceManagerInitializeEnabled: 1
  switchUseNewStyleFilepaths: 1
  switchUseLegacyFmodPriorities: 0
  switchUseMicroSleepForYield: 1
  switchEnableRamDiskSupport: 0
  switchMicroSleepForYieldTime: 25
  switchRamDiskSpaceSize: 12
  ps4NPAgeRating: 12
  ps4NPTitleSecret: 
  ps4NPTrophyPackPath: 
  ps4ParentalLevel: 11
  ps4ContentID: ED1633-NPXX51362_00-0000000000000000
  ps4Category: 0
  ps4MasterVersion: 01.00
  ps4AppVersion: 01.00
  ps4AppType: 0
  ps4ParamSfxPath: 
  ps4VideoOutPixelFormat: 0
  ps4VideoOutInitialWidth: 1920
  ps4VideoOutBaseModeInitialWidth: 1920
  ps4VideoOutReprojectionRate: 60
  ps4PronunciationXMLPath: 
  ps4PronunciationSIGPath: 
  ps4BackgroundImagePath: 
  ps4StartupImagePath: 
  ps4StartupImagesFolder: 
  ps4IconImagesFolder: 
  ps4SaveDataImagePath: 
  ps4SdkOverride: 
  ps4BGMPath: 
  ps4ShareFilePath: 
  ps4ShareOverlayImagePath: 
  ps4PrivacyGuardImagePath: 
  ps4ExtraSceSysFile: 
  ps4NPtitleDatPath: 
  ps4RemotePlayKeyAssignment: -1
  ps4RemotePlayKeyMappingDir: 
  ps4PlayTogetherPlayerCount: 0
  ps4EnterButtonAssignment: 1
  ps4ApplicationParam1: 0
  ps4ApplicationParam2: 0
  ps4ApplicationParam3: 0
  ps4ApplicationParam4: 0
  ps4DownloadDataSize: 0
  ps4GarlicHeapSize: 2048
  ps4ProGarlicHeapSize: 2560
  playerPrefsMaxSize: 32768
  ps4Passcode: frAQBc8Wsa1xVPfvJcrgRYwTiizs2trQ
  ps4pnSessions: 1
  ps4pnPresence: 1
  ps4pnFriends: 1
  ps4pnGameCustomData: 1
  playerPrefsSupport: 0
  enableApplicationExit: 0
  resetTempFolder: 1
  restrictedAudioUsageRights: 0
  ps4UseResolutionFallback: 0
  ps4ReprojectionSupport: 0
  ps4UseAudio3dBackend: 0
  ps4UseLowGarlicFragmentationMode: 1
  ps4SocialScreenEnabled: 0
  ps4ScriptOptimizationLevel: 0
  ps4Audio3dVirtualSpeakerCount: 14
  ps4attribCpuUsage: 0
  ps4PatchPkgPath: 
  ps4PatchLatestPkgPath: 
  ps4PatchChangeinfoPath: 
  ps4PatchDayOne: 0
  ps4attribUserManagement: 0
  ps4attribMoveSupport: 0
  ps4attrib3DSupport: 0
  ps4attribShareSupport: 0
  ps4attribExclusiveVR: 0
  ps4disableAutoHideSplash: 0
  ps4videoRecordingFeaturesUsed: 0
  ps4contentSearchFeaturesUsed: 0
  ps4CompatibilityPS5: 0
  ps4AllowPS5Detection: 0
  ps4GPU800MHz: 1
  ps4attribEyeToEyeDistanceSettingVR: 0
  ps4IncludedModules: []
  ps4attribVROutputEnabled: 0
  monoEnv: 
  splashScreenBackgroundSourceLandscape: {fileID: 0}
  splashScreenBackgroundSourcePortrait: {fileID: 0}
  blurSplashScreenBackground: 1
  spritePackerPolicy: 
  webGLMemorySize: 16
  webGLExceptionSupport: 1
  webGLNameFilesAsHashes: 0
  webGLShowDiagnostics: 0
  webGLDataCaching: 1
  webGLDebugSymbols: 0
  webGLEmscriptenArgs: 
  webGLModulesDirectory: 
  webGLTemplate: APPLICATION:Default
  webGLAnalyzeBuildSize: 0
  webGLUseEmbeddedResources: 0
  webGLCompressionFormat: 1
  webGLWasmArithmeticExceptions: 0
  webGLLinkerTarget: 1
  webGLThreadsSupport: 0
  webGLDecompressionFallback: 0
  webGLInitialMemorySize: 32
  webGLMaximumMemorySize: 2048
  webGLMemoryGrowthMode: 2
  webGLMemoryLinearGrowthStep: 16
  webGLMemoryGeometricGrowthStep: 0.2
  webGLMemoryGeometricGrowthCap: 96
  webGLPowerPreference: 2
  scriptingDefineSymbols: {}
  additionalCompilerArguments: {}
  platformArchitecture: {}
  scriptingBackend: {}
  il2cppCompilerConfiguration: {}
  il2cppCodeGeneration: {}
  managedStrippingLevel:
    EmbeddedLinux: 1
    GameCoreScarlett: 1
    GameCoreXboxOne: 1
    Nintendo Switch: 1
    PS4: 1
    PS5: 1
    QNX: 1
    Stadia: 1
    VisionOS: 1
    WebGL: 1
    Windows Store Apps: 1
    XboxOne: 1
    iPhone: 1
    tvOS: 1
  incrementalIl2cppBuild: {}
  suppressCommonWarnings: 1
  allowUnsafeCode: 0
  useDeterministicCompilation: 1
  additionalIl2CppArgs: 
  scriptingRuntimeVersion: 1
  gcIncremental: 1
  gcWBarrierValidation: 0
  apiCompatibilityLevelPerPlatform: {}
  m_RenderingPath: 1
  m_MobileRenderingPath: 1
  metroPackageName: UR3eVizUnity
  metroPackageVersion: 
  metroCertificatePath: 
  metroCertificatePassword: 
  metroCertificateSubject: 
  metroCertificateIssuer: 
  metroCertificateNotAfter: 0000000000000000
  metroApplicationDescription: UR3eVizUnity
  wsaImages: {}
  metroTileShortName: 
  metroTileShowName: 0
  metroMediumTileShowName: 0
  metroLargeTileShowName: 0
  metroWideTileShowName: 0
  metroSupportStreamingInstall: 0
  metroLastRequiredScene: 0
  metroDefaultTileSize: 1
  metroTileForegroundText: 2
  metroTileBackgroundColor: {r: 0.13333334, g: 0.17254902, b: 0.21568628, a: 0}
  metroSplashScreenBackgroundColor: {r: 0.12941177, g: 0.17254902, b: 0.21568628, a: 1}
  metroSplashScreenUseBackgroundColor: 0
  syncCapabilities: 0
  platformCapabilities: {}
  metroTargetDeviceFamilies: {}
  metroFTAName: 
  metroFTAFileTypes: []
  metroProtocolName: 
  vcxProjDefaultLanguage: 
  XboxOneProductId: 
  XboxOneUpdateKey: 
  XboxOneSandboxId: 
  XboxOneContentId: 
  XboxOneTitleId: 
  XboxOneSCId: 
  XboxOneGameOsOverridePath: 
  XboxOnePackagingOverridePath: 
  XboxOneAppManifestOverridePath: 
  XboxOneVersion: 1.0.0.0
  XboxOnePackageEncryption: 0
  XboxOnePackageUpdateGranularity: 2
  XboxOneDescription: 
  XboxOneLanguage:
  - enus
  XboxOneCapability: []
  XboxOneGameRating: {}
  XboxOneIsContentPackage: 0
  XboxOneEnhancedXboxCompatibilityMode: 0
  XboxOneEnableGPUVariability: 1
  XboxOneSockets: {}
  XboxOneSplashScreen: {fileID: 0}
  XboxOneAllowedProductIds: []
  XboxOnePersistentLocalStorageSize: 0
  XboxOneXTitleMemory: 8
  XboxOneOverrideIdentityName: 
  XboxOneOverrideIdentityPublisher: 
  vrEditorSettings: {}
  cloudServicesEnabled:
    UNet: 1
  luminIcon:
    m_Name: 
    m_ModelFolderPath: 
    m_PortalFolderPath: 
  luminCert:
    m_CertPath: 
    m_SignPackage: 1
  luminIsChannelApp: 0
  luminVersion:
    m_VersionCode: 1
    m_VersionName: 
  hmiPlayerDataPath: 
  hmiForceSRGBBlit: 1
  embeddedLinuxEnableGamepadInput: 1
  hmiLogStartupTiming: 0
  hmiCpuConfiguration: 
  apiCompatibilityLevel: 6
  activeInputHandler: 0
  windowsGamepadBackendHint: 0
  cloudProjectId: 
  framebufferDepthMemorylessMode: 0
  qualitySettingsNames: []
  projectName: 
  organizationId: 
  cloudEnabled: 0
  legacyClampBlendShapeWeights: 0
  hmiLoadingImage: {fileID: 0}
  platformRequiresReadableAssets: 0
  virtualTexturingSupportEnabled: 0
  insecureHttpOption: 0

--- End of Content ---

--- Content of ProjectSettings/EditorBuildSettings.asset ---
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1045 &1
EditorBuildSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Scenes:
  - enabled: 1
    path: Assets/Scenes/RobotScene.unity
    guid: 9fc0d4010bbf28b4594072e72b8655ab
  - enabled: 1
    path: Assets/Scenes/SettingsScene.unity
    guid: 5e4119b3a755b8c4db0d8696b89f6e5c
  - enabled: 1
    path: Assets/Scenes/ControlsScene.unity
    guid: 80fdda4a5cd1bd64da2be18773ec0b8c
  m_configObjects: {}

--- End of Content ---

--- Content of ProjectSettings/TagManager.asset ---
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!78 &1
TagManager:
  serializedVersion: 2
  tags:
  - robot
  layers:
  - Default
  - TransparentFX
  - Ignore Raycast
  - 
  - Water
  - UI
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  m_SortingLayers:
  - name: Default
    uniqueID: 0
    locked: 0

--- End of Content ---

--- Content of ProjectSettings/InputManager.asset ---
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!13 &1
InputManager:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Axes:
  - serializedVersion: 3
    m_Name: Horizontal
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: left
    positiveButton: right
    altNegativeButton: a
    altPositiveButton: d
    gravity: 3
    dead: 0.001
    sensitivity: 3
    snap: 1
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Vertical
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: down
    positiveButton: up
    altNegativeButton: s
    altPositiveButton: w
    gravity: 3
    dead: 0.001
    sensitivity: 3
    snap: 1
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire1
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: left ctrl
    altNegativeButton: 
    altPositiveButton: mouse 0
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire2
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: left alt
    altNegativeButton: 
    altPositiveButton: mouse 1
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire3
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: left shift
    altNegativeButton: 
    altPositiveButton: mouse 2
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Jump
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: space
    altNegativeButton: 
    altPositiveButton: 
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Mouse X
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0.1
    snap: 0
    invert: 0
    type: 1
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Mouse Y
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0.1
    snap: 0
    invert: 0
    type: 1
    axis: 1
    joyNum: 0
  - serializedVersion: 3
    m_Name: Mouse ScrollWheel
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0.1
    snap: 0
    invert: 0
    type: 1
    axis: 2
    joyNum: 0
  - serializedVersion: 3
    m_Name: Horizontal
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 0
    type: 2
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Vertical
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 1
    type: 2
    axis: 1
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire1
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 0
    altNegativeButton: 
    altPositiveButton: 
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire2
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 1
    altNegativeButton: 
    altPositiveButton: 
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Fire3
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 2
    altNegativeButton: 
    altPositiveButton: 
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Jump
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 3
    altNegativeButton: 
    altPositiveButton: 
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Submit
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: return
    altNegativeButton: 
    altPositiveButton: joystick button 0
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Submit
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: enter
    altNegativeButton: 
    altPositiveButton: space
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0
  - serializedVersion: 3
    m_Name: Cancel
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: escape
    altNegativeButton: 
    altPositiveButton: joystick button 1
    gravity: 1000
    dead: 0.001
    sensitivity: 1000
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 0

--- End of Content ---

==========================================

========== ASSETS FOLDER CONTENTS (USER FILES FOCUS) ==========

--- Directory: Assets ---
  - File: .DS_Store
  - File: HideObjectsController.cs
  - File: NuGet.config
  - File: packages.config

--- Directory: Assets/Editor ---
  - File: ProjectTextExporter.cs

--- Directory: Assets/Materials ---
  - File: HitPointMarkerMaterial.mat
  (Skipping ignored directory: Packages)

--- Directory: Assets/Prefabs ---
  - File: HitPointMarker.prefab

--- Directory: Assets/Scenes ---
  - File: ControlsScene.unity
  - File: RobotScene.unity
  - File: SettingsScene.unity

--- Directory: Assets/Scenes/SampleScene ---
  - File: LightingData.asset
  - File: ReflectionProbe-0.exr

--- Directory: Assets/Scripts ---
  - File: ButtonController.cs
  - File: ControlsLinkController.cs
  - File: DefaultSettings.cs
  - File: FreeStyleCamera.cs
  - File: Menu.cs
  - File: NetMQClient.cs
  - File: RealTimeJointPositionController.cs
  - File: SettingsController.cs
  (Skipping ignored directory: TextMesh Pro)
  (Skipping ignored directory: URDF)
================================================================

========== TEXT FILE CONTENTS (USER SCRIPTS ETC.) ==========
----- START FILE: Assets/HideObjectsController.cs -----
using UnityEngine;


/// <summary>
/// Controls the visibility of specified GameObjects by toggling their active state
/// when the 'T' key is pressed.
/// </summary>
public class HideObjectsController : MonoBehaviour
{
    private GameObject hitPointMarker;
    private GameObject menuButton;

    void Start()
    {
        menuButton = GameObject.Find("MenuButton");
        hitPointMarker = GameObject.Find("HitPointMarker(Clone)");

        if (menuButton == null)
            Debug.LogWarning("MenuButton not found in the scene!");
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.T))
        {
            if (hitPointMarker == null) hitPointMarker = GameObject.Find("HitPointMarker(Clone)");
            ToggleObject(hitPointMarker);
            ToggleObject(menuButton);
        }
    }

    void ToggleObject(GameObject obj)
    {
        if (obj != null)
        {
            Debug.Log($"Toggle {obj.name}");
            obj.SetActive(!obj.activeSelf);
        }
    }
}


----- END FILE: Assets/HideObjectsController.cs -----

----- START FILE: Assets/Editor/ProjectTextExporter.cs -----
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Linq;
using System.Collections.Generic;

public class ProjectTextExporter_UserFiles
{
    // --- Configuration: What to Include/Exclude ---

    // Include content ONLY for these extensions. Others will just be listed by name.
    private static readonly HashSet<string> IncludeContentExtensions = new HashSet<string> {
        ".cs", ".shader", // Core code/shaders
        ".json", ".xml", ".txt", ".csv", ".asmdef", ".inputactions" // Common data/config formats & Unity specific
    };

    // Folders to completely ignore (relative to Assets or Project Root)
    private static readonly HashSet<string> IgnoredFolders = new HashSet<string> {
        // Standard Unity ignores (relative to Project Root)
        "Library", "Temp", "obj", "Logs", "UserSettings", "Builds",
        // Common VCS/IDE folders (relative to Project Root)
        ".git", ".vs", ".vscode", ".idea",
        // Common large/imported package folders (relative to Assets)
        "TextMesh Pro", // Exclude default TMP assets
        "Packages", // Exclude Assets/Packages folder often used by importers
        "URDF", // Exclude URDF import folders if present
        "Plugins", // Often contains pre-compiled binaries or large assets
        // Add other specific large package/asset store folders here if needed
        // e.g., "Photon", "Standard Assets"
    };

    // Project Settings files to include the content of (relative to ProjectSettings)
    private static readonly string[] ImportantSettingsFiles = {
            "ProjectVersion.txt", // Useful for version info
            "ProjectSettings.asset", // Core settings like Product Name
            "EditorBuildSettings.asset", // Included scenes
            "TagManager.asset", // Tags and Layers
            "InputManager.asset" // Legacy input axes/buttons (if used)
            // Add others selectively if needed, e.g., Physics settings, specific pipeline assets
    };

    // --- End Configuration ---


    [MenuItem("Tools/Export Project Text Info (User Files Only)")]
    public static void ExportUserFileInfo()
    {
        string projectRoot = Path.GetDirectoryName(Application.dataPath); // Folder ABOVE Assets
        string outputFile = Path.Combine(projectRoot, "ProjectUserFilesSummary.txt");
        StringBuilder summary = new StringBuilder();

        summary.AppendLine("========== PROJECT USER FILES SUMMARY ==========");
        summary.AppendLine($"Export Timestamp: {System.DateTime.Now}");
        summary.AppendLine($"Unity Version: {Application.unityVersion}");
        summary.AppendLine($"Project Path: {projectRoot}");
        summary.AppendLine($"Included Content Extensions: {string.Join(", ", IncludeContentExtensions)}");
        summary.AppendLine("==============================================");
        summary.AppendLine();

        // --- List Packages ---
        summary.AppendLine("========== INSTALLED PACKAGES (manifest.json) ==========");
        string manifestPath = Path.Combine(projectRoot, "Packages", "manifest.json");
        if (File.Exists(manifestPath))
        {
            try
            {
                summary.AppendLine($"--- Content of Packages/manifest.json ---");
                summary.AppendLine(File.ReadAllText(manifestPath));
                summary.AppendLine("--- End of Content ---");
            }
            catch (System.Exception ex)
            {
                summary.AppendLine($"Error reading {manifestPath}: {ex.Message}");
            }
        }
        else
        {
            summary.AppendLine("Packages/manifest.json not found.");
        }
        summary.AppendLine("========================================================");
        summary.AppendLine();

        // --- Key Project Settings ---
        summary.AppendLine("========== KEY PROJECT SETTINGS ==========");
        string projectSettingsPath = Path.Combine(projectRoot, "ProjectSettings");
        if (Directory.Exists(projectSettingsPath))
        {
            foreach (string filename in ImportantSettingsFiles)
            {
                string filePath = Path.Combine(projectSettingsPath, filename);
                if (File.Exists(filePath))
                {
                    summary.AppendLine($"--- Content of ProjectSettings/{filename} ---");
                    try
                    {
                        summary.AppendLine(File.ReadAllText(filePath));
                        summary.AppendLine("--- End of Content ---");
                    }
                    catch (System.Exception ex)
                    {
                        summary.AppendLine($"Error reading {filePath}: {ex.Message}");
                    }
                    summary.AppendLine();
                }
                else
                {
                    summary.AppendLine($"ProjectSettings/{filename} not found.");
                }
            }
        }
        else
        {
            summary.AppendLine("ProjectSettings folder not found.");
        }
        summary.AppendLine("==========================================");
        summary.AppendLine();


        // --- Traverse Assets Folder ---
        summary.AppendLine("========== ASSETS FOLDER CONTENTS (USER FILES FOCUS) ==========");
        List<string> textFileContents = new List<string>();
        ProcessDirectoryRecursive(Application.dataPath, Application.dataPath, summary, textFileContents);
        summary.AppendLine("================================================================");
        summary.AppendLine();

        // --- Append Text File Contents ---
        summary.AppendLine("========== TEXT FILE CONTENTS (USER SCRIPTS ETC.) ==========");
        if (textFileContents.Count > 0)
        {
            summary.Append(string.Join("\n\n", textFileContents));
        }
        else
        {
            summary.AppendLine($"No text files found matching the specified extensions: {string.Join(", ", IncludeContentExtensions)}");
        }
        summary.AppendLine("\n==========================================================");


        // --- Write to File ---
        try
        {
            File.WriteAllText(outputFile, summary.ToString());
            Debug.Log($"Project user files summary exported successfully to: {outputFile}");
            EditorUtility.DisplayDialog("Export Successful", $"Project user files summary exported successfully to:\n{outputFile}", "OK");
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"Failed to write project summary file: {ex.Message}");
            EditorUtility.DisplayDialog("Export Failed", $"Failed to write project summary file:\n{ex.Message}", "OK");
        }
    }

    private static void ProcessDirectoryRecursive(string targetDirectory, string rootAssetPath, StringBuilder summary, List<string> textFileContents)
    {
        string relativeDirPath = targetDirectory.Replace(rootAssetPath, "Assets").Replace('\\', '/');
        if (relativeDirPath == targetDirectory) // Handle processing outside Assets (shouldn't happen with current logic)
        {
            relativeDirPath = Path.GetFileName(targetDirectory);
        }

        summary.AppendLine($"\n--- Directory: {relativeDirPath} ---");

        // Process Files
        try
        {
            foreach (string filePath in Directory.GetFiles(targetDirectory))
            {
                string fileName = Path.GetFileName(filePath);
                string fileExt = Path.GetExtension(fileName).ToLowerInvariant();

                // *** Skip .meta files entirely ***
                if (fileExt == ".meta")
                {
                    continue;
                }

                string relativeFilePath = filePath.Replace(rootAssetPath, "Assets").Replace('\\', '/');

                summary.AppendLine($"  - File: {fileName}"); // List the file name

                // If it's a text file we want the content of, schedule it
                if (IncludeContentExtensions.Contains(fileExt))
                {
                    try
                    {
                        string fileContent = File.ReadAllText(filePath);
                        textFileContents.Add(
                            $"----- START FILE: {relativeFilePath} -----\n" +
                            $"{fileContent}\n" +
                            $"----- END FILE: {relativeFilePath} -----"
                        );
                    }
                    catch (System.Exception ex)
                    {
                        textFileContents.Add(
                            $"----- ERROR READING FILE: {relativeFilePath} -----\n" +
                            $"{ex.Message}\n" +
                            $"----- END FILE: {relativeFilePath} -----"
                        );
                    }
                }
            }
        }
        catch (System.Exception ex)
        {
            summary.AppendLine($"  * Error listing files in {relativeDirPath}: {ex.Message}");
        }


        // Process Subdirectories Recursively
        try
        {
            foreach (string directoryPath in Directory.GetDirectories(targetDirectory))
            {
                string dirName = Path.GetFileName(directoryPath);
                string relativeSubDirPath = directoryPath.Replace(rootAssetPath, "Assets").Replace('\\', '/');

                // Skip ignored folders (check both root-level and Assets-level ignores)
                if (IgnoredFolders.Contains(dirName) || IgnoredFolders.Contains(relativeSubDirPath))
                {
                    summary.AppendLine($"  (Skipping ignored directory: {dirName})");
                }
                else
                {
                    ProcessDirectoryRecursive(directoryPath, rootAssetPath, summary, textFileContents);
                }
            }
        }
        catch (System.Exception ex)
        {
            summary.AppendLine($"  * Error listing subdirectories in {relativeDirPath}: {ex.Message}");
        }
    }
}
----- END FILE: Assets/Editor/ProjectTextExporter.cs -----

----- START FILE: Assets/Scripts/ButtonController.cs -----
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class ButtonController : MonoBehaviour
{
    public void Resume ()
    {
        SceneManager.LoadScene(0);
    }
}

----- END FILE: Assets/Scripts/ButtonController.cs -----

----- START FILE: Assets/Scripts/ControlsLinkController.cs -----
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ControlsLinkController : MonoBehaviour
{
    public void OpenLink ()
    {
        Application.OpenURL("https://danimosite.wordpress.com/2020/04/27/get-control-of-unity/");
    }
}

----- END FILE: Assets/Scripts/ControlsLinkController.cs -----

----- START FILE: Assets/Scripts/DefaultSettings.cs -----
using System.Collections.Generic;

public static class DefaultSettings
{
    public static class Values
    {
        public static int Port = 5556;
        public static float Speed = 20f;
        public static float Stiffness = 100000f;
        public static float Damping = 10000f;
        public static float ForceLimit = 10000f;
    }
    
    public static class Keys
    {
        public static string Port = "Port";
        public static string Speed = "Speed";
        public static string Stiffness =  "Stiffness";
        public static string Damping = "Damping";
        public static string ForceLimit = "ForceLimit";
    }

    public static Dictionary<string, string> Lookup = new Dictionary<string, string>
    {
        { Keys.Port, Values.Port.ToString() },
        { Keys.Speed, Values.Speed.ToString() },
        { Keys.Stiffness, Values.Stiffness.ToString() },
        { Keys.Damping, Values.Damping.ToString() },
        { Keys.ForceLimit, Values.ForceLimit.ToString() }
    };
}

----- END FILE: Assets/Scripts/DefaultSettings.cs -----

----- START FILE: Assets/Scripts/FreeStyleCamera.cs -----
using System;
using UnityEngine;

/// <summary>
/// Free Style Camera Controller.
/// </summary>
[RequireComponent(typeof(UnityEngine.Camera), typeof(AudioListener))]
public class FreeStyleCameraController : MonoBehaviour
{
    #region Inspector Properties

    [Header("Move Settings")]
    [Range(0.1f, 10)]
    [Tooltip("The move speed with WASD keys.")]
    public float MoveSpeed = 5f;

    [Header("Pan Settings")]
    [Range(1, 20)]
    [Tooltip("How responsive the Pan action should be.")]
    public float PanSpeed = 10f;
    [Tooltip("Ivert the Pan direction.")]
    public bool PanInverted = true;

    [Header("Scroll Settings")]
    [Range(1, 20)]
    [Tooltip("How responsive the Scroll action should be.")]
    public float ScrollSpeed = 10f;
    [Tooltip("Invert the Scroll direction.")]
    public bool ScrollInverted = false;

    [Header("Look Settings")]
    [Range(100, 300)]
    [Tooltip("How responsive the Look action should be.")]
    public float LookSensitivity = 200.0f;
    [Tooltip("The angle in which the user can look Vertically measured from the horizontal")]
    public float ClampAngle = 80.0f;
    [Tooltip("Invert the Look direction in the X-axis")]
    public bool LookInvertX = false;
    [Tooltip("Invert the Look direction in the Y-axis")]
    public bool LookInvertY = false;

    [Header("Orbit Settings")]
    [Range(1, 10)]
    [Tooltip("How responsive the Orbit action should be.")]
    public float OrbitSpeed = 5.0f;
    [Tooltip("Invert the Orbit direction.")]
    public bool InvertOrbit = false;

    [Header("Misc. Settings")]
    [Range(1, 10)]
    [Tooltip("The minimum distance from the target when focusing or while Orbiting")]
    public float FocusDistance = 5f;

    [Tooltip("The minimum distance to active selection.")]
    public float MinDistanceToSelection = 2f;

    [Tooltip("Toggle min distance to active selection.")]
    public bool UseMinDistance = true;

    [Tooltip("The prefab to use as a marker to show hit location when user selects a GameObject")]
    public GameObject HitpointMarkerPrefab;

    #endregion

    #region Private Properties

    // Selection properties...
    private bool _hasSelection;
    /// <summary>
    /// If a Selection is active.
    /// </summary>
    public bool HasSelection
    {
        get { return _hasSelection; }
        set
        {
            if (value != _hasSelection)
            {
                _hasSelection = value;

                _hitPointMarker.SetActive(_hasSelection);
            }
        }
    }

    private Vector3 _target;
    /// <summary>
    /// The target orbit pivot point.
    /// </summary>
    public Vector3 Target
    {
        get { return _target; }
        set
        {
            if (value != _target)
            {
                _target = value;
                targetAltitude = Target.y;
                if (_hitPointMarker != null)
                {
                    _hitPointMarker.transform.position = _target;
                }
            }
        }
    }

    // Instantiated HitPointmarker GameObject
    private GameObject _hitPointMarker { get; set; }

    // Panning properties...
    private Vector3 initMousePos { get; set; }
    private Vector3 panDelta { get; set; }

    // Look rotation properties...
    private float lookRotY = 0.0f;
    private float lookRotX = 0.0f;

    // Orbit properties...
    private float targetAltitude { get; set; }
    private float orbitRotX = 0.0f;

    private bool _isMoving;
    /// <summary>
    /// Is the Camera being moved via the WASDQE keys.
    /// </summary>
    public bool IsMoving
    {
        get { return _isMoving; }
        set
        {
            if (value != _isMoving)
            {
                _isMoving = value;
                if (_isMoving)
                {
                    CameraIsMoving?.Invoke();
                }
                else
                {
                    CameraStoppedMoving?.Invoke();
                }
            }
        }
    }

    private bool _isPanning;
    /// <summary>
    /// Is the Camera panning.
    /// </summary>
    public bool IsPanning
    {
        get { return _isPanning; }
        set
        {
            if (value != _isPanning)
            {
                _isPanning = value;
                if (_isPanning)
                {
                    CameraIsPanning?.Invoke();
                }
                else
                {
                    CameraStoppedPanning?.Invoke();
                }
            }
        }
    }

    private bool _isScrolling;
    /// <summary>
    /// Is the Camera Scrolling.
    /// </summary>
    public bool IsScrolling
    {
        get { return _isScrolling; }
        set
        {
            if (value != _isScrolling)
            {
                _isScrolling = value;
                if (_isScrolling)
                {
                    CameraIsScrolling?.Invoke();
                }
                else
                {
                    CameraStoppedScrolling?.Invoke();
                }
            }
        }
    }

    private bool _isLooking;
    /// <summary>
    /// Is the Camera Looking around.
    /// </summary>
    public bool IsLooking
    {
        get { return _isLooking; }
        set
        {
            if (value != _isLooking)
            {
                _isLooking = value;
                if (_isLooking)
                {
                    CameraIsLooking?.Invoke();
                }
                else
                {
                    CameraStoppedLooking?.Invoke();
                }
            }
        }
    }

    private bool _isOrbiting;
    /// <summary>
    /// If the Camera is orbiting.
    /// </summary>
    public bool IsOrbiting
    {
        get { return _isOrbiting; }
        set
        {
            if (value != _isOrbiting)
            {
                _isOrbiting = value;
                if (_isOrbiting)
                {
                    CameraIsOrbiting?.Invoke();
                }
                else
                {
                    CameraStoppedOrbiting?.Invoke();
                }
            }
        }
    }

    #endregion

    #region Methods

    /// <summary>
    /// On component enabled.
    /// </summary>
    private void OnEnable()
    {

        // Get the Camera's Local Rotation as Euler angles...
        Vector3 rot = transform.localRotation.eulerAngles;
        // Set initial x, y rotation angles...
        lookRotY = rot.y;
        lookRotX = rot.x;

        Target = transform.position;

        // Enable Audio listener...
        transform.GetComponent<AudioListener>().enabled = true;
    }

    /// <summary>
    /// On Component disabled.
    /// </summary>
    private void OnDisable()
    {
        // Disable AudioListener so doesn't conflict with other AudioListeners...
        transform.GetComponent<AudioListener>().enabled = false;
    }

    /// <summary>
    /// When Scene starts.
    /// </summary>
    private void Start()
    {
        // Ensure Camera's tag is set to MainCamera...
        if (transform.tag != "MainCamera")
        {
            transform.tag = "MainCamera";
        }

        //Instantiate HitPoint Marker...
        if (HitpointMarkerPrefab != null)
        {
            _hitPointMarker = Instantiate(HitpointMarkerPrefab, _target, Quaternion.identity);
            _hitPointMarker.SetActive(false);
        }

    }

    /// <summary>
    /// When Update called...
    /// </summary>
    private void Update()
    {
        // Check of user is selecting an object...
        if (Input.GetMouseButtonDown(0))
        {
            RaycastHit hit;
            if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hit))
            {
                // Update the target position...
                Target = hit.point;
                HasSelection = true;
                // Raise event to any listeners...
                SelectionChanged?.Invoke(hit);

            }
            else
            {
                Target = transform.position;
                HasSelection = false;
            }
        }

        // Check if user is escaping Selection...
        if (Input.GetKeyDown(KeyCode.Escape) && HasSelection)
        {
            Target = transform.position;
            HasSelection = false;
        }

        // Check if user is using controls to Move/Pan/Scroll/Look/Orbit/Focus...
        CameraMove();
        CameraPan();
        CameraScroll();
        CameraLook();
        CameraOrbit();
        FocusOnTarget();
    }

    /// <summary>
    /// Moves the Camera based on Key Press (WASDQE).
    /// </summary>
    private void CameraMove()
    {
        bool moving = false;

        // Ensure user can't move while orbiting on the spot...
        if (!HasSelection && IsOrbiting)
        {
            return;
        }

        // Calculate move speed...
        var speed = (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) ? 3 * MoveSpeed / 100 : MoveSpeed / 100;

        // Move forwards...
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow))
        {
            // Maintain min distance to target while moving...
            if (HasSelection && UseMinDistance)
            {
                if (Vector3.Distance(transform.position, Target) <= MinDistanceToSelection)
                {
                    return;
                }
            }

            transform.Translate(transform.forward.normalized * speed, Space.World);
            moving = true;
        }

        // Move left...
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))
        {
            transform.Translate(transform.right.normalized * -speed, Space.World);
            moving = true;
        }

        // Move backwards...
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow))
        {
            transform.Translate(transform.forward.normalized * -speed, Space.World);
            moving = true;
        }

        // Move right...
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))
        {
            transform.Translate(transform.right.normalized * speed, Space.World);
            moving = true;
        }

        // Move up...
        if (Input.GetKey(KeyCode.E))
        {
            transform.Translate(Vector3.up * speed, Space.World);
            moving = true;
        }

        // Move down...
        if (Input.GetKey(KeyCode.Q))
        {
            transform.Translate(Vector3.up * -speed, Space.World);
            moving = true;
        }

        // Update the IsMoving property...
        IsMoving = moving;
    }

    /// <summary>
    /// Pans the Camera parallel to screen.
    /// </summary>
    private void CameraPan()
    {
        bool panning = false;

        bool canPan = (!HasSelection && IsOrbiting) ? false : true;

        // Panning Started...
        if (Input.GetMouseButtonDown(2) && canPan)
        {
            initMousePos = Input.mousePosition;
            panning = true;
        }

        // While Panning...
        if (Input.GetMouseButton(2) && canPan)
        {
            // Calculate Pan delta between frames...
            panDelta = (Input.mousePosition - initMousePos);

            // If pan is inverted, reverse vector...
            panDelta = (PanInverted) ? panDelta = panDelta * -1 : panDelta;

            // Calculate Speed multiplier...
            var speed = (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) ? PanSpeed / 1000 * 3 : PanSpeed / 1000;

            // Translate the camera's position...
            transform.Translate(new Vector3(panDelta.x * speed, panDelta.y * speed));

            // Set initial mouse postion to current mouse position for next Update...
            initMousePos = Input.mousePosition;

            panning = true;
        }

        // Update the IsPanning Property...
        IsPanning = panning;
    }

    /// <summary>
    /// Scrolls the Camera in the normal to screen.
    /// </summary>
    private void CameraScroll()
    {
        bool scrolling = false;

        // Ensure user can't move while orbiting on the spot...
        if (!HasSelection && IsOrbiting)
        {
            return;
        }

        if (Input.GetAxisRaw("Mouse ScrollWheel") != 0)
        {
            // Get mouse scrollwheel value
            var scrollValue = Input.GetAxisRaw("Mouse ScrollWheel");

            // Maintain min distance to target while moving...
            if (scrollValue > 0 && (HasSelection && UseMinDistance))
            {
                if (Vector3.Distance(transform.position, Target) <= MinDistanceToSelection)
                {
                    return;
                }
            }

            // if Scroll is inverted, reverse Scroll direction...
            scrollValue = (ScrollInverted) ? scrollValue * -1 : scrollValue;

            // Calculate Speed multiplier...
            float speed = (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) ? scrollValue * ScrollSpeed * 3 : scrollValue * ScrollSpeed;

            // Translate the camera's position...
            transform.Translate(transform.forward * speed, Space.World);

            scrolling = true;
        }

        // Update the IsScrolling property...
        IsScrolling = scrolling;
    }

    /// <summary>
    /// Rotates the camera depending towards the screen space mouse position.
    /// </summary>
    private void CameraLook()
    {
        bool looking = false;

        if (Input.GetMouseButtonDown(1) && !HasSelection)
        {
            // Reset pivot target position to camera's position...
            Target = transform.position;
        }

        if (Input.GetMouseButton(1))
        {
            // Get Mouse X/Y values...
            float mouseX = Input.GetAxis("Mouse X");
            float mouseY = -Input.GetAxis("Mouse Y");

            // Append axis Rotations...
            if (LookInvertX)
            {
                lookRotY -= mouseX * LookSensitivity * Time.deltaTime;
            }
            else
            {
                lookRotY += mouseX * LookSensitivity * Time.deltaTime;
            }

            if (LookInvertY)
            {
                lookRotX -= mouseY * LookSensitivity * Time.deltaTime;
            }
            else
            {
                lookRotX += mouseY * LookSensitivity * Time.deltaTime;
            }

            // Ensure the value is measured in +- PI (or +- 180). Without this, the clamp below locks out at +- ClampAngle causing camera to direction to jump...
            lookRotX = EnsureValuePlusMinusPi(lookRotX, true);
            lookRotY = EnsureValuePlusMinusPi(lookRotY, true);

            // Clamp rotation...
            lookRotX = Mathf.Clamp(lookRotX, -ClampAngle, ClampAngle);

            // Apply Quarternion Rotation to Transforms rotation....
            transform.rotation = Quaternion.Euler(lookRotX, lookRotY, 0.0f);

            looking = true;
        }

        // Update the IsLooking Property...
        IsLooking = looking;
    }

    /// <summary>
    /// Rotates Camera about a target point.
    /// </summary>
    private void CameraOrbit()
    {
        bool orbiting = false;

        if (Input.GetKey(KeyCode.LeftAlt) && Input.GetMouseButton(1))
        {
            // Get X Axis Value...
            float mouseX = Input.GetAxis("Mouse X");

            if (InvertOrbit)
            {
                mouseX = mouseX * -1;
            }
            // Calculate rotation angle...
            orbitRotX += mouseX * OrbitSpeed * Time.deltaTime;

            // Rotate camera about target and set target as camera's subject.
            transform.RotateAround(Target, Vector3.up, orbitRotX);
            transform.LookAt(Target);

            // Get updated Euler angles from transfrom...
            Vector3 rot = transform.localRotation.eulerAngles;
            lookRotY = rot.y;
            lookRotX = rot.x;

            orbiting = true;
        }

        // Update the IsOrbiting Property...
        IsOrbiting = orbiting;
    }

    /// <summary>
    /// Focus on Target if HasSelection.
    /// </summary>
    private void FocusOnTarget()
    {
        if (Input.GetKeyDown(KeyCode.F) && HasSelection)
        {
            // Look at target...
            transform.LookAt(Target);
            // Calculate new Camera position...
            var t = (Target - transform.position).normalized * (Vector3.Distance(transform.position, Target) - FocusDistance);
            // Move the Camera...
            transform.Translate(t, Space.World);

            // Get updated Euler angles from transfrom...
            Vector3 rot = transform.localRotation.eulerAngles;
            lookRotY = rot.y;
            lookRotX = rot.x;

            // Fire event...
            CameraFocusedOnObject?.Invoke();
        }
    }

    /// <summary>
    /// Ensures angle is always between -180/180 degrees.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static float EnsureValuePlusMinusPi(float value, bool inDegrees)
    {
        float limit = (inDegrees) ? 180 : (float)Math.PI;

        if (value < -limit)
        {
            return value + (limit * 2);
        }
        if (value > limit)
        {
            return value - (limit * 2);
        }
        return value;
    }

    #endregion

    #region Events
    #region Event Delegates

    public delegate void CameraIsMovingAction();
    public delegate void CameraStoppedMovingAction();

    public delegate void CameraIsPanningAction();
    public delegate void CameraStoppedPanningAction();

    public delegate void CameraIsScrollingAction();
    public delegate void CameraStoppedScrollingAction();

    public delegate void CameraIsLookingAction();
    public delegate void CameraStoppedLookingAction();

    public delegate void CameraIsOrbittingAction();
    public delegate void CameraStoppedOrbitingAction();

    public delegate void CameraFocusedOnObjectAction();

    public delegate void SelectionChangedAction(RaycastHit hit);

    #endregion

    #region Events

    /// <summary>
    /// Triggered when the Camera is Moving.
    /// </summary>
    public static event CameraIsMovingAction CameraIsMoving;
    /// <summary>
    /// Triggered when the Camera stops Moving.
    /// </summary>
    public static event CameraStoppedMovingAction CameraStoppedMoving;

    /// <summary>
    /// Triggered when the Camera is Panning.
    /// </summary>
    public static event CameraIsPanningAction CameraIsPanning;
    /// <summary>
    /// Triggered when the Camera stops Panning.
    /// </summary>
    public static event CameraStoppedPanningAction CameraStoppedPanning;

    /// <summary>
    /// Triggered when the Camera is Scrolling.
    /// </summary>
    public static event CameraIsScrollingAction CameraIsScrolling;
    /// <summary>
    /// Triggered when the Camera stops Scrolling.
    /// </summary>
    public static event CameraStoppedScrollingAction CameraStoppedScrolling;

    /// <summary>
    /// Triggered when the Camera is Looking.
    /// </summary>
    public static event CameraIsLookingAction CameraIsLooking;
    /// <summary>
    /// Triggered when the Camera stops Looking.
    /// </summary>
    public static event CameraStoppedLookingAction CameraStoppedLooking;

    /// <summary>
    /// Triggered when the Camera is Orbiting.
    /// </summary>
    public static event CameraIsOrbittingAction CameraIsOrbiting;
    /// <summary>
    /// Triggered when the Camera stops Orbiting.
    /// </summary>
    public static event CameraStoppedOrbitingAction CameraStoppedOrbiting;

    /// <summary>
    /// Triggered when the Camera focuses on an Object.
    /// </summary>
    public static event CameraFocusedOnObjectAction CameraFocusedOnObject;

    /// <summary>
    /// Triggered when the Selection is changed.
    /// </summary>
    public static event SelectionChangedAction SelectionChanged;

    #endregion
    #endregion
}

----- END FILE: Assets/Scripts/FreeStyleCamera.cs -----

----- START FILE: Assets/Scripts/Menu.cs -----
using UnityEngine;
using UnityEngine.SceneManagement;

public class Menu : MonoBehaviour
{
    public static bool MenuIsActive = false;
    public GameObject MenuUI;
    public GameObject MenuButton;

    // Update is called once per frame
    void Update()
    {
        if(Input.GetKeyDown(KeyCode.Escape))
        {
            if (MenuIsActive)
            {
                Resume();
            } else
            {
                ActivateMenu();
            }
        }
    }

    public void Resume ()
    {
        MenuUI.SetActive(false);
        MenuButton.SetActive(true);
        MenuIsActive = false;
    }

    public void ActivateMenu()
    {
        MenuUI.SetActive(true);
        MenuButton.SetActive(false);
        MenuIsActive = true;
    }

    public void Quit ()
    {
        Debug.Log("Quitting game...");
        Application.Quit();
    }

    public void Settings()
    {
        SceneManager.LoadScene(1);
    }

    public void Controls()
    {
        SceneManager.LoadScene(2);
    }
}

----- END FILE: Assets/Scripts/Menu.cs -----

----- START FILE: Assets/Scripts/NetMQClient.cs -----
/*
 This is a modified version of: https://github.com/valkjsaaa/Unity-ZeroMQ-Example/blob/master/Assets/ClientObject.cs
 */

using System.Collections.Concurrent;
using System.Threading;
using NetMQ;
using UnityEngine;
using NetMQ.Sockets;
using UnityEngine.Events;

public class ClientObject : MonoBehaviour
{
    public string topic = "actual_q";
    public string port = "5556";
    private NetMqListener _netMqListener;
    public UnityEvent<int, float> UpdateJP;

    private void HandleMessage(string message)
    {
        string[] msgSplit = message.Split(' ');
        string msg_topic = msgSplit[0];
        string msg = msgSplit[1];
        int jpIndex = int.Parse(msg_topic[msg_topic.Length - 1].ToString());
        float jp = float.Parse(msg);

        UpdateJP.Invoke(jpIndex, jp);
        // Ind en af gangen. Hvert joint får sin egen besked
    }

    public void GetRecentParameters()
    {
        port = PlayerPrefs.GetString(DefaultSettings.Keys.Port, DefaultSettings.Lookup[DefaultSettings.Keys.Port]);
    }

    private void Start()
    {
        GetRecentParameters();
        _netMqListener = new NetMqListener(HandleMessage, topic, port);
        _netMqListener.Start();
    }

    private void Update()
    {
        _netMqListener.Update();
    }

    private void OnDestroy()
    {
        _netMqListener.Stop();
    }
}

public class NetMqListener
{
    private readonly Thread _listenerWorker;

    private bool _listenerCancelled;

    private string _topic;

    private string _port;

    public delegate void MessageDelegate(string message);

    private readonly MessageDelegate _messageDelegate;

    private readonly ConcurrentQueue<string> _messageQueue = new ConcurrentQueue<string>();

    private void ListenerWork()
    {
        AsyncIO.ForceDotNet.Force();
        using (var subSocket = new SubscriberSocket())
        {
            subSocket.Options.ReceiveHighWatermark = 1000;
            subSocket.Connect($"tcp://localhost:{_port}");
            subSocket.Subscribe(_topic);
            while (!_listenerCancelled)
            {
                string frameString;
                if (!subSocket.TryReceiveFrameString(out frameString)) continue;
                _messageQueue.Enqueue(frameString);
            }
            subSocket.Close();
        }
        NetMQConfig.Cleanup();
    }

    public void Update()
    {
        while (!_messageQueue.IsEmpty)
        {
            string message;
            if (_messageQueue.TryDequeue(out message))
            {
                _messageDelegate(message);
            }
            else
            {
                break;
            }
        }
    }

    public NetMqListener(MessageDelegate messageDelegate, string topic, string port)
    {
        _messageDelegate = messageDelegate;
        _topic = topic;
        _port = port;
        _listenerWorker = new Thread(ListenerWork);
    }

    public void Start()
    {
        _listenerCancelled = false;
        _listenerWorker.Start();
    }

    public void Stop()
    {
        _listenerCancelled = true;
        _listenerWorker.Join();
    }
}
----- END FILE: Assets/Scripts/NetMQClient.cs -----

----- START FILE: Assets/Scripts/RealTimeJointPositionController.cs -----
using UnityEngine;

public class JointPositionController : MonoBehaviour
{
    public ArticulationBody[] joints; // Assign joints in Inspector
    private float[] targetPositions = { 0f, 0f, 0f, 0f, 0f, 0f };   // Target positions (in degrees)
    private float Speed = 20f;        // Speed in degrees per second
    private float Stiffness = 100000f;
    private float Damping = 10000f;
    private float ForceLimit = 10000f;

    public void GetRecentParameters()
    {
        Debug.Log("Applying recent settings");
        string SpeedKey = DefaultSettings.Keys.Speed;
        Speed = float.Parse(PlayerPrefs.GetString(SpeedKey, DefaultSettings.Lookup[SpeedKey]));

        string StiffnessKey = DefaultSettings.Keys.Stiffness;
        Stiffness = float.Parse(PlayerPrefs.GetString(StiffnessKey, DefaultSettings.Lookup[StiffnessKey]));

        string DampingKey = DefaultSettings.Keys.Damping;
        Damping = float.Parse(PlayerPrefs.GetString(DampingKey, DefaultSettings.Lookup[DampingKey]));

        string ForceLimitKey = DefaultSettings.Keys.ForceLimit;
        ForceLimit = float.Parse(PlayerPrefs.GetString(ForceLimitKey, DefaultSettings.Lookup[ForceLimitKey]));
    }


    void Start()
    {
        if (joints.Length != targetPositions.Length)
        {
            Debug.LogError("Joints and target positions must have the same length!");
            return;
        }

        GetRecentParameters();
    }

    void Update()
    {
        for (int i = 0; i < joints.Length; i++)
        {
            ArticulationDrive drive = joints[i].xDrive;
            float currentPos = joints[i].jointPosition[0]; // Current position (radians)
            float targetPos = targetPositions[i] * Mathf.Deg2Rad; // Convert to radians

            float direction = Mathf.Sign(targetPos - currentPos); // -1 or 1
            float velocity = direction * Speed * Mathf.Deg2Rad; // Convert speed to rad/s

            drive.target = targetPositions[i]; // Keep target in degrees
            drive.targetVelocity = velocity;
            drive.stiffness = Stiffness;  // Strong movement
            drive.damping = Damping;      // Smooth movement
            drive.forceLimit = ForceLimit;   // Allow movement

            joints[i].xDrive = drive;
        }
    }

    public void SetTarget(int index, float value)
    {
        targetPositions[index] = value * Mathf.Rad2Deg;
    }
}

----- END FILE: Assets/Scripts/RealTimeJointPositionController.cs -----

----- START FILE: Assets/Scripts/SettingsController.cs -----
using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.SceneManagement;

public class SettingsController : MonoBehaviour
{
    // Start is called before the first frame update
    public List<TMP_InputField> InputFields;

    void Start()
    {
        UpdateUI();
    }

    public void UpdateUI ()
    {
        foreach (var inputField in InputFields)
        {

            string key = getInputFieldKey(inputField);
            string value = PlayerPrefs.GetString(key, DefaultSettings.Lookup[key]);
            inputField.text = value;
        }
    }

    /// <summary>
    /// Saves the settings from the input fields to player prefs
    /// </summary>
    public void SaveSettings ()
    {
        foreach (var inputField in InputFields)
        {
            PlayerPrefs.SetString(getInputFieldKey(inputField), inputField.text);
        }
        PlayerPrefs.Save();
    }

    public void Resume ()
    {
        SceneManager.LoadScene(0);
    }

    public void SetToDefault ()
    {
        foreach (var inputField in InputFields)
        {
            var key = getInputFieldKey(inputField);
            PlayerPrefs.SetString(key, DefaultSettings.Lookup[key]);
        }
        PlayerPrefs.Save();
        UpdateUI();
    }


    private string getInputFieldKey (TMP_InputField inputField)
    {
        return inputField.transform.parent.name;
    }

    public void OpenArticulationBodyURL ()
    {
        Application.OpenURL("https://docs.unity3d.com/6000.0/Documentation/Manual/class-ArticulationBody.html");
    }

}

----- END FILE: Assets/Scripts/SettingsController.cs -----
==========================================================
